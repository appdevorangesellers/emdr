import { CreateParameters, ListParameters } from './parameters';
import { PaymentData } from '../../../data/payments/data';
import Callback from '../../../types/Callback';
import List from '../../../data/list/List';
import NetworkClient from '../../../NetworkClient';
import ParentedResource from '../../ParentedResource';
import Payment from '../../../data/payments/Payment';
export default class CustomersPaymentsResource extends ParentedResource<PaymentData, Payment> {
    constructor(networkClient: NetworkClient);
    protected getResourceUrl(customerId: string): string;
    /**
     * Retrieve all Payments linked to the Customer.
     *
     * @since 1.1.1
     * @see https://docs.mollie.com/reference/v2/customers-api/list-customer-payments
     */
    all: CustomersPaymentsResource['list'];
    /**
     * Retrieve all Payments linked to the Customer.
     *
     * @since 3.0.0
     * @see https://docs.mollie.com/reference/v2/customers-api/list-customer-payments
     */
    page: CustomersPaymentsResource['list'];
    /**
     * Creates a payment for the customer.
     *
     * Linking customers to payments enables a number of [Mollie Checkout](https://www.mollie.com/en/checkout) features, including:
     *
     * -   Keeping track of payment preferences for your customers.
     * -   Enabling your customers to charge a previously used credit card with a single click.
     * -   Improved payment insights in your dashboard.
     * -   Recurring payments.
     *
     * @since 1.1.1
     * @see https://docs.mollie.com/reference/v2/customers-api/create-customer-payment
     */
    create(parameters: CreateParameters): Promise<Payment>;
    create(parameters: CreateParameters, callback: Callback<Payment>): void;
    /**
     * Retrieve all Payments linked to the Customer.
     *
     * @since 3.0.0
     * @see https://docs.mollie.com/reference/v2/customers-api/list-customer-payments
     */
    list(parameters: ListParameters): Promise<List<Payment>>;
    list(parameters: ListParameters, callback: Callback<List<Payment>>): void;
}
